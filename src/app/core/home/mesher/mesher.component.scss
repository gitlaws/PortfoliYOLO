// SCSS Variables for better performance
$mesh-sizes: (
  1: 40vmax,
  2: 35vmax,
  3: 30vmax,
  4: 45vmax,
  5: 38vmax,
);

$mesh-sizes-mobile: (
  1: 60vw,
  2: 55vw,
  3: 50vw,
  4: 65vw,
  5: 58vw,
);

// Light theme colors
$light-colors: (
  primary: hsla(217, 100%, 50%, 0.08),
  secondary: hsla(156, 100%, 45%, 0.06),
  tertiary: hsla(280, 60%, 50%, 0.05),
  quaternary: hsla(45, 100%, 65%, 0.04),
  quinary: hsla(200, 100%, 60%, 0.07),
);

$light-bg: hsl(0, 0%, 98%);

// Dark theme colors
$dark-colors: (
  primary: hsla(217, 100%, 60%, 0.2),
  secondary: hsla(180, 100%, 50%, 0.15),
  tertiary: hsla(280, 70%, 60%, 0.12),
  quaternary: hsla(30, 100%, 55%, 0.08),
  quinary: hsla(120, 60%, 60%, 0.1),
);

$dark-bg: hsl(220, 50%, 6%);

// Shape colors
$light-shapes: (
  triangle-1: hsla(217, 100%, 50%, 0.4),
  triangle-2: hsla(280, 60%, 50%, 0.4),
  circle: hsla(156, 100%, 45%, 0.4),
  square: hsla(45, 100%, 65%, 0.4),
  hexagon: hsla(200, 100%, 60%, 0.4),
);

$dark-shapes: (
  triangle-1: hsla(217, 100%, 60%, 0.6),
  triangle-2: hsla(280, 70%, 60%, 0.6),
  circle: hsla(180, 100%, 50%, 0.6),
  square: hsla(30, 100%, 55%, 0.6),
  hexagon: hsla(120, 60%, 60%, 0.6),
);

// Blob colors
$light-blobs: (
  1: hsla(217, 100%, 50%, 0.08),
  2: hsla(156, 100%, 45%, 0.06),
  3: hsla(280, 60%, 50%, 0.07),
);

$dark-blobs: (
  1: hsla(217, 100%, 60%, 0.12),
  2: hsla(180, 100%, 50%, 0.1),
  3: hsla(280, 70%, 60%, 0.08),
);

// Mixins for reusable styles
@mixin absolute-full {
  position: absolute;
  inset: 0;
}

@mixin gpu-optimize {
  contain: layout style paint;
  will-change: transform;
  transform: translateZ(0);
}

@mixin mesh-gradient($colors, $sizes) {
  background: radial-gradient(
      circle map-get($sizes, 1) at 20% 30%,
      map-get($colors, primary) 0%,
      transparent 70%
    ),
    radial-gradient(
      circle map-get($sizes, 2) at 80% 70%,
      map-get($colors, secondary) 0%,
      transparent 70%
    ),
    radial-gradient(
      circle map-get($sizes, 3) at 60% 20%,
      map-get($colors, tertiary) 0%,
      transparent 70%
    ),
    radial-gradient(
      circle map-get($sizes, 4) at 30% 80%,
      map-get($colors, quaternary) 0%,
      transparent 70%
    ),
    radial-gradient(
      circle map-get($sizes, 5) at 90% 40%,
      map-get($colors, quinary) 0%,
      transparent 70%
    );
}

// Base container - optimized for performance
.mesher-canvas {
  @include absolute-full;
  @include gpu-optimize;
  z-index: 0;
  pointer-events: none;
  overflow: hidden;
  isolation: isolate;
}

// Background layer with mesh gradients
.mesh-background {
  @include absolute-full;
  opacity: 1;
  transition: opacity 0.3s ease;
}

// Optional overlay for additional effects
.mesh-overlay {
  @include absolute-full;
  opacity: 0.1;
  mix-blend-mode: overlay;
  pointer-events: none;
}

// Light theme - static gradients for better performance
.mesher-canvas.light {
  .mesh-background {
    @include mesh-gradient($light-colors, $mesh-sizes);
    background-color: $light-bg;
    // Simplified animation - only transform for better performance
    animation: meshFloat 25s ease-in-out infinite alternate;
  }

  .mesh-overlay {
    background: linear-gradient(
      135deg,
      hsla(0, 0%, 100%, 0.02) 0%,
      hsla(217, 50%, 80%, 0.01) 100%
    );
  }
}

// Dark theme - static gradients for better performance
.mesher-canvas.dark {
  .mesh-background {
    @include mesh-gradient($dark-colors, $mesh-sizes);
    background-color: $dark-bg;
    // Simplified animation - only transform for better performance
    animation: meshFloat 20s ease-in-out infinite alternate-reverse;
  }

  .mesh-overlay {
    background: linear-gradient(
      135deg,
      hsla(220, 50%, 10%, 0.03) 0%,
      hsla(280, 30%, 20%, 0.02) 100%
    );
  }
}

// Floating Shapes - optimized positioning
.floating-shapes {
  @include absolute-full;
  z-index: 1;
  pointer-events: none;
}

.float-shape {
  position: absolute;
  opacity: 0.3;
  animation: float 12s ease-in-out infinite;

  // Triangle shapes
  &.triangle {
    width: 0;
    height: 0;
    border-left: 12px solid transparent;
    border-right: 12px solid transparent;

    &.triangle-1 {
      top: 15%;
      left: 10%;
      animation-delay: 0s;
      animation-duration: 15s;
    }

    &.triangle-2 {
      border-left-width: 8px;
      border-right-width: 8px;
      top: 75%;
      right: 20%;
      animation-delay: 5s;
      animation-duration: 18s;
    }
  }

  // Circle shapes
  &.circle {
    border-radius: 50%;

    &.circle-1 {
      width: 20px;
      height: 20px;
      top: 35%;
      right: 15%;
      animation-delay: 2s;
      animation-duration: 14s;
    }

    &.circle-2 {
      width: 16px;
      height: 16px;
      top: 60%;
      left: 25%;
      animation-delay: 7s;
      animation-duration: 16s;
    }
  }

  // Square shape
  &.square.square-1 {
    width: 18px;
    height: 18px;
    top: 25%;
    right: 35%;
    animation-delay: 3s;
    animation-duration: 20s;
  }

  // Hexagon shape
  &.hexagon.hexagon-1 {
    width: 20px;
    height: 11.55px;
    top: 85%;
    left: 15%;
    animation-delay: 4s;
    animation-duration: 17s;

    &::before,
    &::after {
      content: "";
      position: absolute;
      width: 0;
      border-left: 10px solid transparent;
      border-right: 10px solid transparent;
    }

    &::before {
      bottom: 100%;
      border-bottom: 5.77px solid;
    }

    &::after {
      top: 100%;
      border-top: 5.77px solid;
    }
  }
}

// Morphing Blobs - optimized
.morphing-blobs {
  @include absolute-full;
  z-index: 1;
  pointer-events: none;
}

.blob {
  position: absolute;
  border-radius: 30% 70% 70% 30% / 30% 30% 70% 70%;
  opacity: 0.15;
  filter: blur(2px);
  animation: morphBlob 20s ease-in-out infinite;

  &.blob-1 {
    width: 200px;
    height: 150px;
    top: 10%;
    left: 80%;
    animation-duration: 25s;
  }

  &.blob-2 {
    width: 150px;
    height: 200px;
    bottom: 20%;
    left: 5%;
    animation-delay: 8s;
    animation-duration: 22s;
  }

  &.blob-3 {
    width: 180px;
    height: 120px;
    top: 50%;
    right: 10%;
    animation-delay: 15s;
    animation-duration: 28s;
  }
}

// Theme-specific shape colors
.mesher-canvas.light {
  .float-shape {
    &.triangle {
      &.triangle-1 {
        border-bottom: 12px solid map-get($light-shapes, triangle-1);
      }
      &.triangle-2 {
        border-bottom: 8px solid map-get($light-shapes, triangle-2);
      }
    }
    &.circle {
      background: map-get($light-shapes, circle);
    }
    &.square {
      background: map-get($light-shapes, square);
    }
    &.hexagon {
      background: map-get($light-shapes, hexagon);
      &::before,
      &::after {
        border-bottom-color: map-get($light-shapes, hexagon);
        border-top-color: map-get($light-shapes, hexagon);
      }
    }
  }

  @each $key, $color in $light-blobs {
    .blob.blob-#{$key} {
      background: $color;
    }
  }
}

.mesher-canvas.dark {
  .float-shape {
    &.triangle {
      &.triangle-1 {
        border-bottom: 12px solid map-get($dark-shapes, triangle-1);
      }
      &.triangle-2 {
        border-bottom: 8px solid map-get($dark-shapes, triangle-2);
      }
    }
    &.circle {
      background: map-get($dark-shapes, circle);
    }
    &.square {
      background: map-get($dark-shapes, square);
    }
    &.hexagon {
      background: map-get($dark-shapes, hexagon);
      &::before,
      &::after {
        border-bottom-color: map-get($dark-shapes, hexagon);
        border-top-color: map-get($dark-shapes, hexagon);
      }
    }
  }

  @each $key, $color in $dark-blobs {
    .blob.blob-#{$key} {
      background: $color;
    }
  }
}

// Optimized animations - fewer keyframes for better performance
@keyframes float {
  0%,
  100% {
    transform: translateY(0) rotate(0deg);
  }
  50% {
    transform: translateY(-15px) rotate(180deg);
  }
}

@keyframes morphBlob {
  0%,
  100% {
    border-radius: 30% 70% 70% 30% / 30% 30% 70% 70%;
    transform: translate(0, 0) scale(1);
  }
  50% {
    border-radius: 70% 30% 30% 70% / 70% 70% 30% 30%;
    transform: translate(20px, -20px) scale(1.05);
  }
}

// Simplified mesh animation - transform only for better performance
@keyframes meshFloat {
  0%,
  100% {
    transform: translateZ(0) scale(1);
  }
  50% {
    transform: translateZ(0) scale(1.02);
  }
}

// Performance optimizations
@media (prefers-reduced-motion: reduce) {
  .mesher-canvas * {
    animation: none !important;
    transition: none !important;
  }
}

// Mobile optimizations
@media (max-width: 768px) {
  .mesher-canvas.light .mesh-background {
    @include mesh-gradient($light-colors, $mesh-sizes-mobile);
    animation-duration: 35s;
  }

  .mesher-canvas.dark .mesh-background {
    @include mesh-gradient($dark-colors, $mesh-sizes-mobile);
    animation-duration: 35s;
  }

  .float-shape {
    opacity: 0.2;
    transform: scale(0.8);
  }

  .blob {
    opacity: 0.1;
    transform: scale(0.7);
  }
}

// High contrast mode
@media (prefers-contrast: high) {
  .mesher-canvas {
    .mesh-background {
      opacity: 0.3;
    }
    .float-shape,
    .blob {
      opacity: 0.1;
    }

    &.light .mesh-background {
      background-color: hsl(0, 0%, 100%);
    }
    &.dark .mesh-background {
      background-color: hsl(0, 0%, 0%);
    }
  }
}

// Print optimization
@media print {
  .mesher-canvas {
    display: none;
  }
}

// Accessibility
.mesher-canvas:focus-visible {
  outline: 2px solid transparent;
}
